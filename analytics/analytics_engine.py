import re
import logging
import asyncio
from datetime import datetime
from telegram.helpers import escape_markdown
from parser.player_parser import PlayerParser
from utils.helpers import clean_html_tags

class AnalyticsEngine:
    def __init__(self, monitor):
        self.monitor = monitor
        self.config = monitor.config.get("analytics", {})
        self.max_speed = self.config.get("max_speed", 50)
        self.teleport_threshold = self.config.get("teleport_threshold", 100)

    def detect_anomalies(self, player_data: dict) -> str:
        anomalies = []
        if player_data.get("speed", 0) > self.max_speed:
            anomalies.append("–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è")
        if player_data.get("distance", 0) > self.teleport_threshold:
            anomalies.append("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è")
        return " | ".join(anomalies) if anomalies else "–ù–æ—Ä–º–∞"

    def generate_heatmap_report(self) -> str:
        zone_activity = {}
        for zone, players in self.monitor.zone_time.items():
            if isinstance(players, dict):
                zone_activity[zone] = sum(players.values())
            else:
                zone_activity[zone] = players
        sorted_zones = sorted(zone_activity.items(), key=lambda x: x[1], reverse=True)[:5]
        report_lines = [f"‚Ä¢ {zone}: {int(time // 60)} –º–∏–Ω—É—Ç" for zone, time in sorted_zones]
        return "üî• –¢–æ–ø-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω:\n" + "\n".join(report_lines)

    async def generate_player_report(self, player_name: str) -> str:
        logging.debug(f"–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–≥—Ä–æ–∫–∞: {player_name}")
        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
            PlayerParser.clear_cache()
            player_history = self.monitor.get_player_history(player_name, limit=5)
            last_position = self.monitor.get_last_position(player_name)
            player_data = await PlayerParser.parse_player_profile(player_name)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞ {escape_markdown(player_name, version=2)}"

        report = [
            f"üìä *–û—Ç—á—ë—Ç –ø–æ –∏–≥—Ä–æ–∫—É* `{escape_markdown(player_name, version=2)}`",
            f"üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ–± armor –∏ health, –µ—Å–ª–∏ –µ—Å—Ç—å
        for p in self.monitor.current_data:
            if p["name"].lower() == player_name.lower():
                armor = p.get("armor", "N/A")
                health = p.get("health", "N/A")
                report.append(f"üõ° –ë—Ä–æ–Ω—è: {armor} | ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {health}")
                break

        if last_position:
            x, z, _ = last_position
            zone_name = self.monitor.get_zone_name_by_coordinates(x, z)
            if zone_name:
                report.append(f"üìç –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–æ–Ω–∞: {escape_markdown(zone_name, version=2)}")
            else:
                report.append(f"üìç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: `X: {int(x)} Z: {int(z)}`")

        if player_history:
            unique_zones = set()
            for x, z, _ in player_history:
                zone_name = self.monitor.get_zone_name_by_coordinates(x, z)
                if zone_name:
                    unique_zones.add(zone_name)
                else:
                    unique_zones.add(f"X: {int(x)}, Z: {int(z)}")
            report.append("\nüîç *–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–π:*\n" + "\n".join(f"‚Ä¢ {zone}" for zone in unique_zones))

        if player_data:
            sections = [
                ("üì± –°–æ—Ü—Å–µ—Ç–∏", player_data.get('socials')),
                ("üèÖ –†–æ–ª–∏", player_data.get('roles')),
                ("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", player_data.get('stats')),
                ("üÉè –†–ü-–∫–∞—Ä—Ç–æ—á–∫–∏", [
                    f"{card['h3']}: {clean_html_tags(card['p'])}"
                    for card in player_data.get('rp_cards', [])
                ]),
                ("üíé –ü—Ä–µ–º–∏—É–º —Å—Ç–∞—Ç—É—Å", [clean_html_tags(player_data.get('player_plus'))])
            ]
            for title, data in sections:
                if data and any(data):
                    cleaned_data = []
                    for item in data:
                        if isinstance(item, tuple) and len(item) == 2:
                            name, link = item
                            cleaned_data.append(f"{escape_markdown(name, version=2)}: {link}")
                        else:
                            item = item.replace("sports_esports", "üéÆ").replace("emoji_events", "üèÜ")
                            item = re.sub(r'\s+', ' ', item)
                            item = re.sub(r'\s+([.,!?;:])', r'\1', item)
                            cleaned_data.append(item)
                    report.append(f"\n{title}:\n" + "\n".join(f"‚Ä¢ {item}" for item in cleaned_data if item))

        if len(report) == 2:
            report.append("\n‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

        return "\n".join(report)
